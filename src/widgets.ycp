{

textdomain "iscsi-lio-server";
import "IscsiServerFunctions";
import "IscsiLioData";
import "Label";
import "IP";
//	**************** global funcions and variables *****
string curr_target = "";
integer curr_tpg = 1;
string modify_record = "";
map inc_auth = $[];

boolean CheckLun( integer l, list<term> other, boolean silent )
    {
    string s = tostring(l);
    boolean ret = size(filter( term i, other, ``(i[1]:""==s)))==0;
    y2milestone( "CheckLun other:%1", other );
    y2milestone( "CheckLun l:%1 ret:%2", l, ret );
    if( !ret && !silent )
        Popup::Error( _("Selected Lun is already in use!") );
    return( ret );
    }

boolean CheckName( string n, list<term> other )
    {
    boolean ret = size(filter( term i, other, ``(i[2]:""==n)))==0;
    if( !ret )
        Popup::Error( _("Selected Name is already in use!") );
    return( ret );
    }

boolean CheckPath( string p, list<term> other )
    {
    boolean ret = IscsiLioData::CheckPath( p )[0]:false;
    if( !ret )
        Popup::Error( _("Selected Path must be either block device or normal file!") );
    if( ret && size(filter( term i, other, ``(i[3]:""==p)))>0 )
        {
        Popup::Error( _("Selected Path is already in use!") );
        ret = false;
        }
    return( ret );
    }

term LUNDetailDialog( integer pos, list<term> items )
    {
    y2milestone( "LUNDetailDialog pos:%1 items:%2", pos, items );
    list<term> other = (pos>=0)?remove(items,pos):items;
    y2milestone( "LUNDetailDialog other:%1", other );
    term previous= items[pos]:`Empty();
    term ret = `Empty();
    string lun_def = "99";
    if( pos<0 )
        {
        integer count=0;
        while( !CheckLun(count,other,true) )
            {
            count = count+1;
            }
        lun_def = tostring(count);
        }
    term lun_dialog =
        `VBox(
            `Left( `InputField( `id( `lun ), `opt(`hstretch), "LUN", previous[1]:lun_def ) ),
            `VSpacing(1),
            `HBox(
                `InputField( `id( `path ), `opt(`hstretch), _("Path:"), previous[3]:""),
                `VBox( `Label(""), `PushButton(`id(`browse), _("Browse")))),
            `InputField( `id( `name ), `opt(`hstretch), "Name (autogenerated when empty):", previous[2]:"" ),
            `VSpacing(1),
            `Left( `HBox( 
                `PushButton(`id(`ok), `opt(`default), Label::OKButton() ), 
                `PushButton(`id(`cancel), Label::CancelButton() )))
            );
    UI::OpenDialog(lun_dialog);
    UI::ChangeWidget(`id(`lun), `ValidChars, "0123456789" );
    symbol sym = `nil;
    while(sym != `ok && sym !=`cancel)
        {
        sym = (symbol)UI::UserInput();
        if(sym==`browse)
            {
            string file = UI::AskForExistingFile("/", "", _("Select file or device"));
            if (file!=nil && CheckPath( file, other ) )
                UI::ChangeWidget(`path, `Value, file);
            }
        else if( sym==`path )
            {
            CheckPath( (string)UI::QueryWidget(`path,`Value), other );
            }
        if(sym == `ok) 
            {
            integer lun=tointeger(UI::QueryWidget(`lun, `Value));
            string name = (string)UI::QueryWidget(`name,`Value);
            string pth = (string)UI::QueryWidget(`path,`Value);
            y2milestone( "LUNDetailDialog lun:%1 name:%2 path:%3", lun, name, pth );
            if( !CheckPath( pth, other ) || !CheckLun( lun, other, false ) ||
                !CheckName( name, other ))
                sym = `again;
            if( sym==`ok )
                {
                if( size(name)==0 )
                    {
                    list<string> used = maplist( term i, other, ``(i[2]:""));
                    y2milestone( "LUNDetailDialog used:%1", used );
                    name = IscsiLioData::CreateLunName( used, pth );
                    }
                ret = `item( `id(pos>=0?pos:size(other)), lun, name, pth );
                y2milestone( "LUNDetailDialog ret:%1", ret );
                }
            }
        }
    UI::CloseDialog();
    y2milestone( "LUNDetailDialog ret:%1", ret );
    return ret;
    }

// set incoming authentication enabled/disabled status
void setAuthIn(boolean status){
 y2milestone("Status of AuthIncoming %1", status);
 UI::ChangeWidget(`id(`incoming_table),`Enabled, status );
 UI::ChangeWidget(`id(`auth_in),`Value, status );

 UI::ChangeWidget(`id(`add),`Enabled, status );
 UI::ChangeWidget(`id(`edit),`Enabled, status );
 UI::ChangeWidget(`id(`delete),`Enabled, status );

 if(status) UI::ChangeWidget(`id(`auth_none),`Value, !status );
}

// set outgoing authentication enabled/disabled status
void setAuthOut(boolean status){
 y2milestone("Status of AuthOutgoing %1", status);
 UI::ChangeWidget(`id(`user_out),`Enabled, status );
 UI::ChangeWidget(`id(`pass_out),`Enabled, status );
 UI::ChangeWidget(`id(`auth_out),`Value, status );
 if(status) UI::ChangeWidget(`id(`auth_none),`Value, !status );
}

// get values for incoming authentication
list<string> getIncomingValues(){
 list <string> values = [];
 if ((boolean)UI::QueryWidget(`id(`auth_in), `Value) == true){
 integer count = -1;
 while (count<size(inc_auth)-1){
   count = count+1;
   values=add(values, sformat("%1 %2", inc_auth[count, "USER"]:"", inc_auth[count, "PASS"]:""));
  }
  return values;
 } else return [];
}

// get values for outgoing authentication
string getOutgoingValues(){
 if ((boolean)UI::QueryWidget(`id(`auth_out), `Value) == true){
   string values = sformat("%1 %2", UI::QueryWidget(`id(`user_out), `Value), UI::QueryWidget(`id(`pass_out), `Value) );
   return values;
 } else return "";
}

// dialog to add/modify user and password
list <string> getDialogValues(string user, string pass){
 UI::OpenDialog( `VBox(
		   `InputField(`id(`p_user), `opt(`hstretch), _("Username"), user),
		   `Password(`id(`p_pass), _("Password"), pass),
		   `HBox(
			`PushButton(`id(`ok), _("OK")),
			`PushButton(`id(`cancel),_("Cancel")))
			)
                );
	boolean cycle = true;
	while(cycle){
	switch((symbol) UI::UserInput()){
	 case(`ok):
		user = tostring( UI::QueryWidget(`id(`p_user), `Value) );
		pass = tostring( UI::QueryWidget(`id(`p_pass), `Value) );
		UI::CloseDialog();
		cycle = false;
		break;
	 case(`cancel):
		cycle = false;
		UI::CloseDialog();
		break;
	 }
	}
 if (size(user)>0 && size(pass)>0) return [user, pass];
	else return [];
}


symbol saveConfiguration(string key, map event){
  if (is(event["ID"]:nil, string) && event["ID"]:"" == "save"){
        any filename = UI::AskForSaveFileName("/",  "*", _("Save as..."));
        if ( filename != nil && (string)filename!="")
        {
            if ( IscsiServerFunctions::SaveIntoFile( (string)filename ))
            {
                Popup::Message(sformat(_("File %1 was saved successfully."), filename));
                list pathComponents = splitstring(  (string)filename, "/");
                integer s = size(pathComponents) - 1;
                string base = pathComponents[s]:"default";
            }
            else
            {
                Popup::Warning(_("An error occurred while saving the file."));
            }
        }
  }
 return nil;
}




//	**************** Server Dialog	*********************
// dialog with targets

// initialize target dialog
void initTable (string key) ``{
    integer count = 0;
    list <term> inc_items = [];
    // create items from targets
    list<list> tgt = IscsiLioData::GetTargets();
    foreach(list l, tgt, 
        {
        inc_items = add(inc_items, `item(`id(count), l[0]:"", tostring(l[1]:0)));
        count = count + 1;
        });
    // put it into table
    UI::ChangeWidget(`id(`server), `Items, inc_items);
    }

symbol handleTable (string table, map event)
    {
    symbol ret = nil;
    if(event["EventReason"]:"" == "Activated")
        {
        switch((symbol)event["ID"]:nil)
            {
            case(`add):
                // goto  AddDialog() (initAddTarget)
                ret = `add;
                break;
            case(`delete):
                // add a new item
                if (Popup::ContinueCancel(_("Really delete this item?")))
                    {
                    integer del=tointeger( UI::QueryWidget(`id(`server), `CurrentItem) );
                    string target = ((term)UI::QueryWidget(`id(`server), `Item(del)))[1]:"";
                    IscsiServerFunctions::setDelChanges( target );
                    IscsiServerFunctions::removeTarget( ((term)UI::QueryWidget(`id(`server), `Item(del)))[1]:"" );
                    initTable("");
                    }
                break;
            case(`edit):
                // edit new item
                integer edit=tointeger( UI::QueryWidget(`id(`server), `CurrentItem) );
                term t = (term)UI::QueryWidget(`id(`server), `Item(edit));
                y2milestone("handleTable num:%1 t:%2", edit, t);
                curr_target = t[1]:"";
                curr_tpg = tointeger(t[2]:"");
                y2milestone("handleTable tgt:%1 tpg:%2", curr_target, curr_tpg );
                if (IscsiServerFunctions::setModifChanges( curr_target ) == 0) 
                    y2milestone("modified %1", curr_target);
                else 
                    y2error("%1 already modified", curr_target);
                // goto EditDialog() (initModify)
                ret = `edit;
                break;
            }
        }
    boolean empt = size((list)UI::QueryWidget(`server, `Items))==0;
    UI::ChangeWidget(`edit, `Enabled, !empt);
    UI::ChangeWidget(`delete,  `Enabled, !empt);
    return ret;
    }

// create items for incoming table
list <term> getAuthItems(){
 list <term> inc_items = [];
 integer count = -1;
 while (count<size(inc_auth)-1){
  count = count+1;
  inc_items = add(inc_items, `item(`id(count),inc_auth[count, "USER"]:"", "*****"));
 }
 return inc_items;
}

void initiSNS (string key) ``{
boolean ac=false;
string ip = "";
foreach(map<string, any> row, IscsiServerFunctions::getConfig()["iSNS"]:[], {
 if(row["KEY"]:""=="iSNSAccessControl") ac=(row["VALUE"]:"No"=="Yes") ? true : false;
 if(row["KEY"]:""=="iSNSServer") ip=row["VALUE"]:"";
});
UI::ChangeWidget(`isns_ac, `Value, ac);
UI::ChangeWidget(`isns_ip, `Value, ip);
}

boolean validateiSNS(string key, map event){
 string ip = (string)UI::QueryWidget(`isns_ip, `Value);
 boolean valid=true;
 if (size(ip)>0) valid = IP::Check(ip);
	else valid= true;
 if (!valid)Popup::Error (_("Invalid IP address."));
 return valid;
}

void storeiSNS(string option_id, map option_map){
 string ip="";
 if ((boolean)UI::QueryWidget(`isns_ac, `Value))
  {
   ip = (string)UI::QueryWidget(`isns_ip, `Value);
  }
   string ac=((boolean)UI::QueryWidget(`isns_ac, `Value))?"Yes":"No";
   if (ip=="") ac="";
   IscsiServerFunctions::setiSNS(ip, ac);
}


//	**************** Global Dialog	*********************
void initGlobalValues(list<map<string, any> > values){
  setAuthIn(false);
  setAuthOut(false);
   string user = "";
   string pass = "";
   // incoming authentication
   inc_auth = $[];
   integer count = 0;
   foreach(map<string,any> auth, values, {
    if (auth["KEY"]:"" == "IncomingUser") {
	user = splitstring(auth["VALUE"]:"", " ")[0]:"";
	pass = splitstring(auth["VALUE"]:"", " ")[1]:"";
	inc_auth[count] = $["USER":user, "PASS":pass];
	count = count + 1;
	setAuthIn(true);
    }
    if (auth["KEY"]:"" == "OutgoingUser") {
	UI::ChangeWidget(`id(`user_out), `Value, splitstring(auth["VALUE"]:"", " ")[0]:"");
	UI::ChangeWidget(`id(`pass_out), `Value, splitstring(auth["VALUE"]:"", " ")[1]:"");
	setAuthOut(true);
    }
   });
   UI::ChangeWidget(`id(`incoming_table), `Items, getAuthItems() );
}

// initialize discovery authentication or authentication for given target
void initGlobal (string key)
    {
    if (size(curr_target)>0) 
        initGlobalValues(IscsiServerFunctions::getConfig()[curr_target]:[]);
    else 
        initGlobalValues(IscsiServerFunctions::getConfig()["auth"]:[]);
    }

// save discovery authentication or authentication for given target
void storeGlobal(string option_id, map option_map){
   if (size(curr_target)>0){

    IscsiServerFunctions::setTargetAuth( curr_target, getIncomingValues(), getOutgoingValues() );
    IscsiServerFunctions::saveNewTarget(curr_target);

   } else{
	IscsiServerFunctions::setAuth( getIncomingValues(), getOutgoingValues() );
   }
}

// validate functions checks the secret for incoming and outgoing cannot be same
boolean validateGlobal(string key, map event){
 boolean ret=false;
 if (!contains(getIncomingValues(), getOutgoingValues())) ret=true;
	else Popup::Error(_("Cannot use the same secret for incoming and outgoing authentication."));
 return ret;
}
//	************** Add Target Dialog	******************
// initialize function for create new target
void initAddTarget(string key){
// some proposed values
 string target = "iqn";
 string date = ((map<string, any>)SCR::Execute(.target.bash_output, "date +%Y-%m"))["stdout"]:"";
 string domain = ((map<string, any>)SCR::Execute(.target.bash_output, "dnsdomainname"))["stdout"]:"";
 string uuid = ((map<string, any>)SCR::Execute(.target.bash_output, "uuidgen"))["stdout"]:"";
 uuid = deletechars(uuid, "\n");
 if (size(domain)>0){
  domain = (splitstring(domain, "\n"))[0]:"";
  list<string> tmp_list=splitstring(domain, ".");
  domain = sformat("%1.%2", tmp_list[1]:"", tmp_list[0]:"");
 } else domain="com.example";
 target = deletechars(sformat("%1.%2.%3", target, date, domain), "\n");
 y2milestone("init values for add_target %1", target);
 UI::ChangeWidget(`id(`target), `Value, target);
 UI::ChangeWidget(`id(`identifier), `Value, uuid);
 UI::ChangeWidget(`id(`tpg), `ValidChars, String::CDigit());
 UI::ChangeWidget(`id(`tpg), `Value, "1");
 list<term> ip = (list<term>)UI::QueryWidget(`id(`ipaddr), `Items);
 string s =ip[0,1]:"";
 y2milestone("initAddTarget ip:%1", s );
 UI::ChangeWidget(`id(`ipaddr), `Value, s);
 UI::ChangeWidget(`id(`port), `ValidChars, String::CDigit());
 UI::ChangeWidget(`id(`port), `Value, "3260");
}

/*
symbol handleAddTarget (string table, map event){
 symbol ret = nil;
 if(event["EventReason"]:"" == "Activated"){
  switch((symbol)event["ID"]:nil){
   case(`add)        : y2internal("add");
			return `lun_add;
   case(`edit)        : y2internal("edit");
			break;
   case(`delete)        : y2internal("delete");
			break;
   case(`expert)        : y2internal("expert");
			return `expert;

  }
 }
}
*/

// save values
void storeAddTarget(string option_id, map option_map){
 list<map<string, any> > old = [];
 string target = tostring( sformat("%1:%2",UI::QueryWidget(`id(`target), `Value), UI::QueryWidget(`id(`identifier), `Value)) );
// string lun = sformat("%1 Path=%2,Type=fileio",UI::QueryWidget(`id(`lun), `Value), UI::QueryWidget(`id(`path), `Value) );
// add/modify that values
 list<map<string, any> > items = [];
 foreach(term row, (list<term>)UI::QueryWidget(`lun_table, `Items), {
  items = add(items, $["KEY":row[1]:"", "VALUE":row[2]:""]);
 });
 y2milestone("Add target %1", target);
 IscsiServerFunctions::addNewTarget(target, items);
 curr_target = target;
}

// validate function checks if target/lun are unique and not empty
boolean validateAddTarget(string key, map event){
 string target = tostring( UI::QueryWidget(`id(`target), `Value)    );
// string lun = tostring(    UI::QueryWidget(`id(`lun), `Value)       );
 string type = "no";
 if (( size(target)==0 && (Popup::Error(_("The target cannot be empty."))==nil) ) ||
        ( IscsiServerFunctions::ifExists("Target", target) && (Popup::Error(_("The target already exists."))==nil) )){
  UI::SetFocus(`id(`target));
  return false;
 }
/*
 if ((size(lun)==0 && (Popup::Error(_("The logical unit definition cannot be empty."))==nil))||
        ( IscsiServerFunctions::ifExists("Lun", lun) && (Popup::Error(_("The logical unit already exists."))==nil))){
  UI::SetFocus(`id(`lun));
  return false;
 }
*/
 return true;
}

//	**************** Target Auth	*******************
// handle authentication dialog
symbol handleAuth(string key, map event){
 if (event["EventReason"]:"" == "ValueChanged"){
 boolean status = false;
// enable/disable none/incoming/outgoing authentication
 switch((symbol)event["ID"]:nil){
  case(`auth_none):
                status = (boolean)UI::QueryWidget(`id(`auth_none), `Value);
                setAuthIn(!status);
                setAuthOut(!status);
                break;
  case(`auth_in):
                status = (boolean)UI::QueryWidget(`id(`auth_in), `Value);
                setAuthIn(status);
                break;
  case(`auth_out):
                status = (boolean)UI::QueryWidget(`id(`auth_out), `Value);
                setAuthOut(status);
                break;
  }
 }
// add/edit/delete incoming authentication
 if (event["EventReason"]:"" == "Activated"){
 switch((symbol)event["ID"]:nil){
  case(`add)	:
		list<string> values = getDialogValues("", "");
		y2milestone("Add authentication values");
		if (size(values)==2 ){
		string user = values[0]:"";
		string pass = values[1]:"";
		 integer count = size((list)UI::QueryWidget(`id (`incoming_table),`Items));

		inc_auth[size(inc_auth)]= $["USER":user, "PASS":pass];
		 UI::ChangeWidget (`id (`incoming_table), `Items, getAuthItems());
		}

		break;
  case(`edit)	:
		integer curr = tointeger( UI::QueryWidget(`id (`incoming_table),`CurrentItem) );
		y2milestone("Modify authentication values");
		if (curr!=nil){
		 string user = inc_auth[curr, "USER"]:"";
		 string pass = inc_auth[curr, "PASS"]:"";
		 list<string> values = getDialogValues(user, pass);

                 if (size(values)==2 ){
                  string user = values[0]:"";
                  string pass = values[1]:"";

		  list<term> rows = (list<term>)UI::QueryWidget(`id (`incoming_table),`Items);
		  inc_auth[curr] = $["USER":user, "PASS":pass];
		  UI::ChangeWidget (`id (`incoming_table), `Items, getAuthItems());
                 }

		}
		break;
  case(`delete)	:
		any del = UI::QueryWidget(`id (`incoming_table),`CurrentItem);
		y2milestone("Delete authentication value");
		if (del != nil){
		 if (Popup::ContinueCancel(_("Really delete the selected item?")))
		  {
		   integer count = 0;
			map<integer, any> temp_map = $[];
			while(count<size(inc_auth))
                            {
                            if (count<del) 
                                temp_map[count]=inc_auth[count]:nil;
                            else if (count>del)
                                temp_map[count-1]=inc_auth[count]:nil;
                            count = count+1;
                            }
			inc_auth = temp_map;
		  UI::ChangeWidget(`id(`incoming_table), `Items, getAuthItems());
		  } else y2milestone("Delete canceled");
		}
		break;
  }
 }
 if (size((list)UI::QueryWidget(`incoming_table, `Items))==0){
  UI::ChangeWidget(`edit, `Enabled, false);
  UI::ChangeWidget(`delete,  `Enabled, false);
 } else {
	  UI::ChangeWidget(`edit, `Enabled, true);
	  UI::ChangeWidget(`delete,  `Enabled, true);
	}

 return nil;
}

//	**************** Edit Dialog	*****************************

// init values for modifying target (read it from stored map)
void initModify (string key) 
    {
    list <term> inc_items = [];
    y2milestone( "initModify %1 %2", curr_target, curr_tpg );
    UI::ChangeWidget( `id(`target), `Value, (splitstring(curr_target, ":"))[0]:"");
    UI::ChangeWidget( `id(`target),`Enabled, false);
    UI::ChangeWidget( `id(`identifier), `Value, (splitstring(curr_target, ":"))[1]:"");
    UI::ChangeWidget( `id(`identifier), `Enabled, false);
    UI::ChangeWidget( `id(`tpg), `Value, tostring(curr_tpg) );
    UI::ChangeWidget( `id(`tpg), `Enabled, false);
    string ipp = IscsiLioData::GetNetworkPortal( curr_target, curr_tpg )[0]:"";
    y2milestone( "initModify ipp:%1", ipp );
    UI::ChangeWidget( `id(`ipaddr), `Value, (splitstring(ipp, ":"))[0]:"");
    UI::ChangeWidget( `id(`ipaddr), `Enabled, true);
    UI::ChangeWidget( `id(`port), `Value, (splitstring(ipp, ":"))[1]:"3260");
    UI::ChangeWidget( `id(`port), `Enabled, true);
    list lun = IscsiLioData::GetLunList( curr_target, curr_tpg );
    y2milestone( "initModify lun:%1", lun );
    foreach( list l, IscsiLioData::GetLunList( curr_target, curr_tpg ),
        {
        inc_items = add( inc_items, `item(`id(size(inc_items)), l[0]:99, l[1]:"", l[2]:""));
        });
    UI::ChangeWidget(`id(`lun_table), `Items, inc_items);
    }

symbol handleModify(string key, map event)
    {
    if( event["EventReason"]:"" == "Activated" )
        {
        switch((symbol)event["WidgetID"]:nil)
            {
            case `delete:
                any del = UI::QueryWidget(`id (`lun_table),`CurrentItem);
                if (del != nil)
                    {
                    if(Popup::ContinueCancel(_("Really delete the selected item?")))
                        {
                        y2milestone("Delete LUN %1 from table", del);
                        list items=[];
                        integer count=0;
                        foreach(term row, (list<term>)UI::QueryWidget(`lun_table, `Items), 
                            {
                            if (count!=del)
                                {
                                items=add(items, `item(`id(size(items)),row[1]:"", row[2]:""));
                                }
                            count = count + 1;
                            });
                        UI::ChangeWidget(`id(`lun_table), `Items, items);
                        } 
                    else 
                        y2milestone("Delete canceled");
                    }
                break;
            case `edit:
                list<term> items = (list<term>)UI::QueryWidget(`lun_table, `Items);
                integer edit_pos=tointeger(UI::QueryWidget(`lun_table, `CurrentItem));
                y2milestone( "handleModify pos:%1 items:%2", edit_pos, items );
                term ret = LUNDetailDialog( edit_pos, items );
                y2milestone( "handleModify ret:%1 em:%2 eq:%3", ret, `Empty(), ret!=`Empty() );
                if( ret!=`Empty() )
                    {
                    items[edit_pos]=ret;
                    UI::ChangeWidget(`lun_table, `Items, items);
                    UI::ChangeWidget(`lun_table, `CurrentItem, edit_pos);
                    }
                break;
            case `add:
                items = (list<term>)UI::QueryWidget(`lun_table, `Items);
                ret = LUNDetailDialog( -1, items );
                if( ret!=`Empty() )
                    {
                    items = (list<term>)add( items, ret ); 
                    UI::ChangeWidget(`lun_table, `Items, items);
                    UI::ChangeWidget(`lun_table, `CurrentItem, size(items)-1);
                    }
                break;
            }
        }
    boolean enab = size((list)UI::QueryWidget(`lun_table, `Items))>0;
    UI::ChangeWidget(`edit, `Enabled, enab);
    UI::ChangeWidget(`delete, `Enabled, enab);
    }

void storeModify(string option_id, map option_map)
    {
    boolean chg = false;
    foreach(term row, (list<term>)UI::QueryWidget(`lun_table, `Items),
        {
        map lun = $[ "lun" : tointeger(row[1]:"-1"),
                     "nm" : row[2]:"",
                     "path" : row[3]:"" ];
        if(IscsiLioData::NeedUpdateLun( curr_target, curr_tpg, lun ))
            {
            y2milestone( "storeModify lun:%1", lun );
            chg = true;
            if( !IscsiLioData::DoUpdateLun( curr_target, curr_tpg, lun ))
                {
                string txt = sformat( _("Problem seting lun %1 (name:%2) to path %3"),
                                      lun["lun"]:-1, lun["nm"]:"", lun["path"]:"" );
                Popup::Error( txt );
                }
            }
        });
    if( chg )
        {
        IscsiLioData::UpdateConfig();
        initModify("");
        }
    }

}
