{

textdomain "iscsi-lio-server";
import "IscsiServerFunctions";
import "IscsiLioData";
import "Label";
import "IP";
//	**************** global funcions and variables *****
string curr_target = "";
integer curr_tpg = 1;
string modify_record = "";
map inc_auth = $[];

boolean CheckLun( integer l, list<term> other, boolean silent )
    {
    string s = tostring(l);
    boolean ret = isempty(filter( term i, other, ``(i[1]:""==s)));
    y2milestone( "CheckLun other:%1", other );
    y2milestone( "CheckLun l:%1 ret:%2", l, ret );
    if( !ret && !silent )
        Popup::Error( _("Selected Lun is already in use!") );
    return( ret );
    }

boolean CheckName( string n, list<term> other )
    {
    boolean ret = isempty(filter( term i, other, ``(i[2]:""==n)));
    if( !ret )
        Popup::Error( _("Selected Name is already in use!") );
    return( ret );
    }

boolean CheckPath( string p, list<term> other )
    {
    boolean ret = IscsiLioData::CheckPath( p )[0]:false;
    if( !ret )
        Popup::Error( _("Selected Path must be either block device or normal file!") );
    if( ret && !isempty(filter( term i, other, ``(i[3]:""==p))) )
        {
        Popup::Error( _("Selected Path is already in use!") );
        ret = false;
        }
    return( ret );
    }

term LUNDetailDialog( integer pos, list<term> items )
    {
    y2milestone( "LUNDetailDialog pos:%1 items:%2", pos, items );
    list<term> other = (pos>=0)?remove(items,pos):items;
    y2milestone( "LUNDetailDialog other:%1", other );
    term previous= items[pos]:`Empty();
    term ret = `Empty();
    string lun_def = "99";
    if( pos<0 )
        {
        integer count=0;
        while( !CheckLun(count,other,true) )
            {
            count = count+1;
            }
        lun_def = tostring(count);
        }
    term lun_dialog =
        `VBox(
            `Left( `InputField( `id( `lun ), `opt(`hstretch), "LUN", previous[1]:lun_def ) ),
            `VSpacing(1),
            `HBox(
                `InputField( `id( `path ), `opt(`hstretch), _("Path:"), previous[3]:""),
                `VBox( `Label(""), `PushButton(`id(`browse), _("Browse")))),
            `InputField( `id( `name ), `opt(`hstretch), "Name (autogenerated when empty):", previous[2]:"" ),
            `VSpacing(1),
            `Left( `HBox( 
                `PushButton(`id(`ok), `opt(`default), Label::OKButton() ), 
                `PushButton(`id(`cancel), Label::CancelButton() )))
            );
    UI::OpenDialog(lun_dialog);
    UI::ChangeWidget(`id(`lun), `ValidChars, "0123456789" );
    symbol sym = `nil;
    while(sym != `ok && sym !=`cancel)
        {
        sym = (symbol)UI::UserInput();
        if(sym==`browse)
            {
            string file = UI::AskForExistingFile("/", "", _("Select file or device"));
            if (file!=nil && CheckPath( file, other ) )
                UI::ChangeWidget(`path, `Value, file);
            }
        else if( sym==`path )
            {
            CheckPath( (string)UI::QueryWidget(`path,`Value), other );
            }
        if(sym == `ok) 
            {
            integer lun=tointeger(UI::QueryWidget(`lun, `Value));
            string name = (string)UI::QueryWidget(`name,`Value);
            string pth = (string)UI::QueryWidget(`path,`Value);
            y2milestone( "LUNDetailDialog lun:%1 name:%2 path:%3", lun, name, pth );
            if( !CheckPath( pth, other ) || !CheckLun( lun, other, false ) ||
                !CheckName( name, other ))
                sym = `again;
            if( sym==`ok )
                {
                if( isempty(name) )
                    {
                    list<string> used = maplist( term i, other, ``(i[2]:""));
                    y2milestone( "LUNDetailDialog used:%1", used );
                    name = IscsiLioData::CreateLunName( used, pth );
                    }
                ret = `item( `id(pos>=0?pos:size(other)), lun, name, pth );
                y2milestone( "LUNDetailDialog ret:%1", ret );
                }
            }
        }
    UI::CloseDialog();
    y2milestone( "LUNDetailDialog ret:%1", ret );
    return ret;
    }

// set incoming authentication enabled/disabled status
void setAuthIn(boolean status){
 y2milestone("Status of AuthIncoming %1", status);
 UI::ChangeWidget(`id(`user_in),`Enabled, status );
 UI::ChangeWidget(`id(`pass_in),`Enabled, status );
 UI::ChangeWidget(`id(`auth_in),`Value, status );
 if(status) UI::ChangeWidget(`id(`auth_none),`Value, !status );
}

// set outgoing authentication enabled/disabled status
void setAuthOut(boolean status){
 y2milestone("Status of AuthOutgoing %1", status);
 UI::ChangeWidget(`id(`user_out),`Enabled, status );
 UI::ChangeWidget(`id(`pass_out),`Enabled, status );
 UI::ChangeWidget(`id(`auth_out),`Value, status );
 if(status) UI::ChangeWidget(`id(`auth_none),`Value, !status );
}

// get values for incoming authentication
list<string> getIncomingValues()
    {
    list<string> values = [];
    if ((boolean)UI::QueryWidget(`id(`auth_in), `Value) == true)
        values = [ (string)UI::QueryWidget(`id(`user_in), `Value), 
                   (string)UI::QueryWidget(`id(`pass_in), `Value) ];
    return values;
    }

// get values for outgoing authentication
list<string> getOutgoingValues()
    {
    list<string> values = [];
    if ((boolean)UI::QueryWidget(`id(`auth_out), `Value) == true)
        values = [ (string)UI::QueryWidget(`id(`user_out), `Value), 
                   (string)UI::QueryWidget(`id(`pass_out), `Value) ];
    return values;
    }

// dialog to add/modify user and password
list <string> getDialogValues(string user, string pass){
 UI::OpenDialog( `VBox(
		   `InputField(`id(`p_user), `opt(`hstretch), _("Username"), user),
		   `Password(`id(`p_pass), _("Password"), pass),
		   `HBox(
			`PushButton(`id(`ok), _("OK")),
			`PushButton(`id(`cancel),_("Cancel")))
			)
                );
	boolean cycle = true;
	while(cycle){
	switch((symbol) UI::UserInput()){
	 case(`ok):
		user = tostring( UI::QueryWidget(`id(`p_user), `Value) );
		pass = tostring( UI::QueryWidget(`id(`p_pass), `Value) );
		UI::CloseDialog();
		cycle = false;
		break;
	 case(`cancel):
		cycle = false;
		UI::CloseDialog();
		break;
	 }
	}
 if (!isempty(user) && !isempty(pass)) return [user, pass];
	else return [];
}


symbol saveConfiguration(string key, map event)
    {
    y2milestone( "saveConfiguration key:%1 event:%2", key, event );
    if( is(event["ID"]:nil, string) && event["ID"]:"" == "save")
        {
        any filename = UI::AskForSaveFileName("/",  "*", _("Save as..."));
        if ( filename != nil && (string)filename!="")
            {
            if( IscsiServerFunctions::SaveIntoFile( (string)filename ))
                {
                Popup::Message(sformat(_("File %1 was saved successfully."), filename));
                list pathComponents = splitstring(  (string)filename, "/");
                integer s = size(pathComponents) - 1;
                string base = pathComponents[s]:"default";
                }
            else
                {
                Popup::Warning(_("An error occurred while saving the file."));
                }
            }
        }
    return nil;
    }

//	**************** Server Dialog	*********************
// dialog with targets

// initialize target dialog
void initTable (string key) ``{
    integer count = 0;
    list <term> inc_items = [];
    // create items from targets
    list<list> tgt = IscsiLioData::GetTargets();
    foreach(list l, tgt, 
        {
        inc_items = add(inc_items, `item(`id(count), l[0]:"", tostring(l[1]:0)));
        count = count + 1;
        });
    // put it into table
    UI::ChangeWidget(`id(`server), `Items, inc_items);
    }

symbol handleTable (string table, map event)
    {
    symbol ret = nil;
    if(event["EventReason"]:"" == "Activated")
        {
        switch((symbol)event["ID"]:nil)
            {
            case(`add):
                // goto  AddDialog() (initAddTarget)
                ret = `add;
                break;
            case(`delete):
                // remove a item
                any del = UI::QueryWidget(`id(`server),`CurrentItem);
                y2milestone("handleTable del:%1",del);
                if (del != nil)
                    {
                    if(Popup::ContinueCancel(_("Really delete the selected item?")))
                        {
                        list it=(list)UI::QueryWidget(`id(`server), `Items);
                        term i = it[(integer)del]:`Empty();
                        y2milestone("handleTable item:%1",i);
                        if( IscsiLioData::DelTarget( i[1]:"", tointeger(i[2]:"-1") ))
                            {
                            it = remove( it, (integer)del );
                            UI::ChangeWidget(`id(`server), `Items, it);
                            IscsiLioData::UpdateConfig();
                            }
                        } 
                    else 
                        y2milestone("handleTable Delete canceled");
                    }
                break;
            case(`edit):
                // edit new item
                integer edit=tointeger( UI::QueryWidget(`id(`server), `CurrentItem) );
                term t = (term)UI::QueryWidget(`id(`server), `Item(edit));
                y2milestone("handleTable num:%1 t:%2", edit, t);
                curr_target = t[1]:"";
                curr_tpg = tointeger(t[2]:"");
                y2milestone("handleTable tgt:%1 tpg:%2", curr_target, curr_tpg );
                if (IscsiServerFunctions::setModifChanges( curr_target ) == 0) 
                    y2milestone("modified %1", curr_target);
                else 
                    y2error("%1 already modified", curr_target);
                // goto EditDialog() (initModify)
                ret = `edit;
                break;
            }
        }
    boolean empt = isempty((list)UI::QueryWidget(`server, `Items));
    UI::ChangeWidget(`edit, `Enabled, !empt);
    UI::ChangeWidget(`delete,  `Enabled, !empt);
    return ret;
    }

// create items for incoming table
list <term> getAuthItems(){
 list <term> inc_items = [];
 integer count = -1;
 while (count<size(inc_auth)-1){
  count = count+1;
  inc_items = add(inc_items, `item(`id(count),inc_auth[count, "USER"]:"", "*****"));
 }
 return inc_items;
}

void initiSNS (string key) ``{
boolean ac=false;
string ip = "";
foreach(map<string, any> row, IscsiServerFunctions::getConfig()["iSNS"]:[], {
 if(row["KEY"]:""=="iSNSAccessControl") ac=(row["VALUE"]:"No"=="Yes") ? true : false;
 if(row["KEY"]:""=="iSNSServer") ip=row["VALUE"]:"";
});
UI::ChangeWidget(`isns_ac, `Value, ac);
UI::ChangeWidget(`isns_ip, `Value, ip);
}

boolean validateiSNS(string key, map event){
 string ip = (string)UI::QueryWidget(`isns_ip, `Value);
 boolean valid=true;
 if (!isempty(ip)) valid = IP::Check(ip);
	else valid= true;
 if (!valid)Popup::Error (_("Invalid IP address."));
 return valid;
}

void storeiSNS(string option_id, map option_map){
 string ip="";
 if ((boolean)UI::QueryWidget(`isns_ac, `Value))
  {
   ip = (string)UI::QueryWidget(`isns_ip, `Value);
  }
   string ac=((boolean)UI::QueryWidget(`isns_ac, `Value))?"Yes":"No";
   if (ip=="") ac="";
   IscsiServerFunctions::setiSNS(ip, ac);
}


//	**************** Global Dialog	*********************
void initGlobalValues(map auth)
    {
    string user = "";
    string pass = "";
    // incoming authentication
    if( !isempty(auth["incoming"]:[]) );
        {
        user = auth["incoming",0]:"";
        pass = auth["incoming",1]:"";
        }
    UI::ChangeWidget(`id(`user_in), `Value, user );
    UI::ChangeWidget(`id(`pass_in), `Value, pass );
    setAuthIn(!isempty(auth["incoming"]:[]));
    // outgoing authentication
    user = "";
    pass = "";
    if( !isempty(auth["outgoing"]:[]) );
        {
        user = auth["outgoing",0]:"";
        pass = auth["outgoing",1]:"";
        }
    UI::ChangeWidget(`id(`user_out), `Value, user );
    UI::ChangeWidget(`id(`pass_out), `Value, pass );
    setAuthOut(!isempty(auth["outgoing"]:[]));
    }

// initialize discovery authentication or authentication for given target
void initGlobal (string key)
    {
    if (!isempty(curr_target)) 
        initGlobalValues(IscsiLioData::GetAuth(curr_target,curr_tpg,""));
    else 
        initGlobalValues(IscsiLioData::GetAuth("",0,""));
    }

// save discovery authentication or authentication for given target
void storeGlobal(string option_id, map option_map)
    {
    y2milestone( "storeGlobal id:%1 map:%2", option_id, option_map );
    boolean ret = false;
    if(!isempty(curr_target))
        {
        ret = IscsiLioData::SetAuth( curr_target, curr_tpg, "", getIncomingValues(), getOutgoingValues() );
        } 
    else
        {
	ret = IscsiLioData::SetAuth( "", 0, "", getIncomingValues(), getOutgoingValues() );
        }
    if( !ret )
        {
        Popup::Error( _("Problem changing authentication"));
        }
    IscsiLioData::UpdateConfig();
    }

// validate functions checks the secret for incoming and outgoing cannot be same
boolean validateGlobal(string key, map event)
    {
    boolean ret=true;
    return ret;
    }

//	**************** Target Auth	*******************
// handle authentication dialog
symbol handleAuth(string key, map event)
    {
    if (event["EventReason"]:"" == "ValueChanged")
        {
        boolean status = false;
        // enable/disable none/incoming/outgoing authentication
        switch((symbol)event["ID"]:nil)
            {
            case(`auth_none):
                status = (boolean)UI::QueryWidget(`id(`auth_none), `Value);
                setAuthIn(!status);
                setAuthOut(!status);
                break;
            case(`auth_in):
                status = (boolean)UI::QueryWidget(`id(`auth_in), `Value);
                setAuthIn(status);
                break;
            case(`auth_out):
                status = (boolean)UI::QueryWidget(`id(`auth_out), `Value);
                setAuthOut(status);
                break;
            }
        }
    return nil;
    }

//	**************** Edit Dialog	*****************************

// init values for modifying target (read it from stored map)
void initModify (string key) 
    {
    list <term> inc_items = [];
    y2milestone( "initModify %1 %2", curr_target, curr_tpg );
    UI::ChangeWidget( `id(`target), `Value, (splitstring(curr_target, ":"))[0]:"");
    UI::ChangeWidget( `id(`target),`Enabled, false);
    UI::ChangeWidget( `id(`identifier), `Value, (splitstring(curr_target, ":"))[1]:"");
    UI::ChangeWidget( `id(`identifier), `Enabled, false);
    UI::ChangeWidget( `id(`tpg), `Value, tostring(curr_tpg) );
    UI::ChangeWidget( `id(`tpg), `Enabled, false);
    string ipp = IscsiLioData::GetNetworkPortal( curr_target, curr_tpg )[0]:"";
    y2milestone( "initModify ipp:%1", ipp );
    UI::ChangeWidget( `id(`ipaddr), `Value, (splitstring(ipp, ":"))[0]:"");
    UI::ChangeWidget( `id(`ipaddr), `Enabled, true);
    UI::ChangeWidget( `id(`port), `Value, (splitstring(ipp, ":"))[1]:"3260");
    UI::ChangeWidget( `id(`port), `Enabled, true);
    UI::ChangeWidget( `id(`auth), `Value, IscsiLioData::GetTpgAuth(curr_target,curr_tpg));
    list<list> lun = IscsiLioData::GetLunList( curr_target, curr_tpg );
    y2milestone( "initModify lun:%1", lun );
    foreach( list l, lun,
        {
        inc_items = add( inc_items, `item(`id(size(inc_items)), l[0]:99, l[1]:"", l[2]:""));
        });
    UI::ChangeWidget(`id(`lun_table), `Items, inc_items);
    }

symbol handleModify(string key, map event)
    {
    if( event["EventReason"]:"" == "Activated" )
        {
        switch((symbol)event["WidgetID"]:nil)
            {
            case `delete:
                any del = UI::QueryWidget(`id (`lun_table),`CurrentItem);
                if (del != nil)
                    {
                    if(Popup::ContinueCancel(_("Really delete the selected item?")))
                        {
                        y2milestone("Delete LUN %1 from table", del);
                        list it=(list)UI::QueryWidget(`lun_table, `Items);
                        it = remove( it, (integer)del );
                        UI::ChangeWidget(`id(`lun_table), `Items, it);
                        } 
                    else 
                        y2milestone("Delete canceled");
                    }
                break;
            case `edit:
                list<term> items = (list<term>)UI::QueryWidget(`lun_table, `Items);
                integer edit_pos=tointeger(UI::QueryWidget(`lun_table, `CurrentItem));
                y2milestone( "handleModify pos:%1 items:%2", edit_pos, items );
                term ret = LUNDetailDialog( edit_pos, items );
                y2milestone( "handleModify ret:%1 em:%2 eq:%3", ret, `Empty(), ret!=`Empty() );
                if( ret!=`Empty() )
                    {
                    items[edit_pos]=ret;
                    UI::ChangeWidget(`lun_table, `Items, items);
                    UI::ChangeWidget(`lun_table, `CurrentItem, edit_pos);
                    }
                break;
            case `add:
                items = (list<term>)UI::QueryWidget(`lun_table, `Items);
                ret = LUNDetailDialog( -1, items );
                if( ret!=`Empty() )
                    {
                    items = (list<term>)add( items, ret ); 
                    UI::ChangeWidget(`lun_table, `Items, items);
                    UI::ChangeWidget(`lun_table, `CurrentItem, size(items)-1);
                    }
                break;
            }
        }
    boolean enab = !isempty((list)UI::QueryWidget(`lun_table, `Items));
    UI::ChangeWidget(`edit, `Enabled, enab);
    UI::ChangeWidget(`delete, `Enabled, enab);
    }

void storeModify(string option_id, map option_map)
    {
    boolean chg = false;
    if( !IscsiLioData::HasTarget( curr_target, curr_tpg ) )
        {
        chg = true;
        if( !IscsiLioData::AddTarget( curr_target, curr_tpg ))
            {
            string txt = sformat( _("Problem creating target %1 with tpg %2"), 
                                  curr_target, curr_tpg  );
            Popup::Error( txt );
            }
        }
    string ipp = IscsiLioData::GetNetworkPortal( curr_target, curr_tpg )[0]:"";
    string ip = (string)UI::QueryWidget(`ipaddr, `Value );
    integer port = tointeger(UI::QueryWidget(`port, `Value ));
    y2milestone( "storeModify ip:%1 port:%2 ipp:%3", ip, port, ipp );
    string np = sformat( "%1:%2", ip, port );
    if( !isempty(ip) && np != ipp )
        {
        chg = true;
        if( !IscsiLioData::SetNetworkPortal( curr_target, curr_tpg, np ))
            {
            string txt = sformat( _("Problem setting network portal to %1"), np  );
            Popup::Error( txt );
            }
        }
    list<term> it = (list<term>)UI::QueryWidget(`lun_table, `Items);
    list<integer> nll = maplist( term t, it, ``(tointeger(t[1]:"-1")));
    list<integer> oll = maplist( list lli, 
                                 IscsiLioData::GetLunList( curr_target, curr_tpg ),
                                 ``(lli[0]:-1));
    y2milestone( "storeModify oll:%1", oll );
    y2milestone( "storeModify nll:%1", nll );
    foreach( integer l, oll,
        {
        if( !contains( nll, l ))
            {
            chg = true;
            if( !IscsiLioData::DoRemoveLun( curr_target, curr_tpg, l ))
                {
                string txt = sformat( _("Problem removing lun %1"), l );
                Popup::Error( txt );
                }
            }
        });
    foreach(term row, it,
        {
        map lun = $[ "lun" : tointeger(row[1]:"-1"),
                     "nm" : row[2]:"",
                     "path" : row[3]:"" ];
        if(IscsiLioData::NeedUpdateLun( curr_target, curr_tpg, lun ))
            {
            y2milestone( "storeModify lun:%1", lun );
            chg = true;
            if( !IscsiLioData::DoUpdateLun( curr_target, curr_tpg, lun ))
                {
                string txt = sformat( _("Problem setting lun %1 (name:%2) to path %3"),
                                      lun["lun"]:-1, lun["nm"]:"", lun["path"]:"" );
                Popup::Error( txt );
                }
            }
        });
    boolean val = (boolean)UI::QueryWidget(`auth, `Value);
    if( val!=IscsiLioData::GetTpgAuth(curr_target,curr_tpg))
        {
        chg = true;
        if(!IscsiLioData::SetTpgAuth(curr_target,curr_tpg,val))
            {
            string txt = sformat( _("Problem setting auth on %1:%2 to %3"),
                                  curr_target, curr_tpg, val );
            Popup::Error( txt );
            }
        }
    if( chg )
        {
        IscsiLioData::UpdateConfig();
        initModify("");
        }
    }

//	************** Add Target Dialog	******************
// initialize function for create new target
void initAddTarget(string key)
    {
    // some proposed values
    string target = "iqn";
    string date = ((map<string, any>)SCR::Execute(.target.bash_output, "date +%Y-%m"))["stdout"]:"";
    string domain = ((map<string, any>)SCR::Execute(.target.bash_output, "dnsdomainname"))["stdout"]:"";
    string uuid = ((map<string, any>)SCR::Execute(.target.bash_output, "uuidgen"))["stdout"]:"";
    uuid = deletechars(uuid, "\n");
    if (!isempty(domain))
        {
        domain = (splitstring(domain, "\n"))[0]:"";
        list<string> tmp_list=splitstring(domain, ".");
        domain = sformat("%1.%2", tmp_list[1]:"", tmp_list[0]:"");
        } 
    else 
        domain="com.example";
    target = deletechars(sformat("%1.%2.%3", target, date, domain), "\n");
    y2milestone("init values for add_target %1", target);
    UI::ChangeWidget(`id(`target), `Value, target);
    UI::ChangeWidget(`id(`identifier), `Value, uuid);
    UI::ChangeWidget(`id(`tpg), `ValidChars, String::CDigit());
    UI::ChangeWidget(`id(`tpg), `Value, "1");
    list<term> ip = (list<term>)UI::QueryWidget(`id(`ipaddr), `Items);
    string s =ip[0,1]:"";
    y2milestone("initAddTarget ip:%1", s );
    UI::ChangeWidget(`id(`ipaddr), `Value, s);
    UI::ChangeWidget(`id(`port), `ValidChars, String::CDigit());
    UI::ChangeWidget(`id(`port), `Value, "3260");
    UI::ChangeWidget(`id(`auth), `Value, true);
    }

list uiTarget()
    {
    integer tpg = nil;
    tpg = tointeger(UI::QueryWidget(`id(`tpg),`Value));
    return( [ (string)UI::QueryWidget(`id(`target), `Value), 
              (string)UI::QueryWidget(`id(`identifier), `Value),
              tpg ] );
    }

void storeAddTarget(string option_id, map option_map)
    {
    list target = uiTarget();
    y2milestone( "storeAddTarget %1", target );
    curr_target = sformat( "%1:%2", target[0]:"", target[1]:"" );
    curr_tpg = target[2]:-1;
    storeModify(option_id,option_map);
    }


// validate function checks if target/tpg are unique and not empty
boolean validateAddTarget(string key, map event)
    {
    list target = uiTarget();
    y2milestone( "validateAddTarget %1", target );
    boolean ret = true;
    if( isempty(target[0]:"") )
        {
        Popup::Error(_("The target cannot be empty."));
        UI::SetFocus(`id(`target));
        ret = false;
        }
    else if( target[2]:nil==nil )
        {
        Popup::Error(_("The target portal group cannot be empty."));
        UI::SetFocus(`id(`tpg));
        ret = false;
        }
    else if( IscsiLioData::HasTarget(sformat( "%1:%2", target[0]:"", target[1]:"" ), target[2]:-1 ))
        {
        Popup::Error(_("The target already exists."));
        UI::SetFocus(`id(`target));
        ret = false;
        }
    return ret;
    }

void initClient(string key)
    {
    y2milestone( "initClient %1 %2", curr_target, curr_tpg );
    UI::ChangeWidget( `id(`target), `Value, (splitstring(curr_target, ":"))[0]:"");
    UI::ChangeWidget( `id(`target),`Enabled, false);
    UI::ChangeWidget( `id(`identifier), `Value, (splitstring(curr_target, ":"))[1]:"");
    UI::ChangeWidget( `id(`identifier), `Enabled, false);
    UI::ChangeWidget( `id(`tpg), `Value, tostring(curr_tpg) );
    UI::ChangeWidget( `id(`tpg), `Enabled, false);
    list<string> clnt = IscsiLioData::GetClntList( curr_target, curr_tpg );
    y2milestone( "initClient clnt:%1", clnt );
    list <term> inc_items = [];
    string auth = _("Disabled");
    boolean tgt_auth = IscsiLioData::GetTpgAuth( curr_target, curr_tpg );
    foreach( string s, clnt,
        {
        if( tgt_auth )
            {
            map m = IscsiLioData::GetAuth( curr_target, curr_tpg, s );
            auth = "";
            if( !isempty(m["incoming"]:[]) )
                auth = _("Incoming");
            if( !isempty(m["outgoing"]:[]) )
                {
                if(!isempty(auth))
                    auth = auth + "/";
                auth = auth +  _("Outgoing");
                }
            if( isempty(auth) )
                auth = _("None");
            }
        string lun = "";
        map<integer,integer> lmap = IscsiLioData::GetClntLun( curr_target, curr_tpg, s );
        foreach( integer l1, integer l2, lmap,
            {
            if(!isempty(lun))
                lun = lun + "-";
            lun = lun + sformat("%1:%2",l1,l2);
            });
        inc_items = add( inc_items, `item(`id(size(inc_items)), s, lun, auth));
        });
    UI::ChangeWidget(`id(`clnt_table), `Items, inc_items);
    }

symbol handleClient(string key, map event)
    {
    if( event["EventReason"]:"" == "Activated" )
        {
        switch((symbol)event["WidgetID"]:nil)
            {
            case `delete:
                any del = UI::QueryWidget(`id (`clnt_table),`CurrentItem);
                if (del != nil)
                    {
                    if(Popup::ContinueCancel(_("Really delete the selected item?")))
                        {
                        y2milestone("handleClient Delete Client %1 from table", del);
                        list it=(list)UI::QueryWidget(`clnt_table, `Items);
                        it = remove( it, (integer)del );
                        UI::ChangeWidget(`id(`clnt_table), `Items, it);
                        } 
                    else 
                        y2milestone("handleClient: Delete canceled");
                    }
                break;
            case `edit:
                list<term> items = (list<term>)UI::QueryWidget(`clnt_table, `Items);
                integer edit_pos=tointeger(UI::QueryWidget(`clnt_table, `CurrentItem));
                y2milestone( "handleClient pos:%1 items:%2", edit_pos, items );
                term ret = LUNDetailDialog( edit_pos, items );
                y2milestone( "handleClient ret:%1 em:%2 eq:%3", ret, `Empty(), ret!=`Empty() );
                if( ret!=`Empty() )
                    {
                    items[edit_pos]=ret;
                    UI::ChangeWidget(`clnt_table, `Items, items);
                    UI::ChangeWidget(`clnt_table, `CurrentItem, edit_pos);
                    }
                break;
            case `add:
                items = (list<term>)UI::QueryWidget(`clnt_table, `Items);
                ret = LUNDetailDialog( -1, items );
                if( ret!=`Empty() )
                    {
                    items = (list<term>)add( items, ret ); 
                    UI::ChangeWidget(`clnt_table, `Items, items);
                    UI::ChangeWidget(`clnt_table, `CurrentItem, size(items)-1);
                    }
                break;
            }
        }
    boolean enab = !isempty((list)UI::QueryWidget(`clnt_table, `Items));
    UI::ChangeWidget(`edit_lun, `Enabled, enab);
    UI::ChangeWidget(`edit_auth, `Enabled, enab);
    UI::ChangeWidget(`delete, `Enabled, enab);
    UI::ChangeWidget(`copy, `Enabled, enab);
    }

boolean validateClient(string key, map event)
    {
    boolean ret = true;
    return( ret );
    }

void storeClient(string option_id, map option_map)
    {
    list target = uiTarget();
    y2milestone( "storeAddTarget %1", target );
    curr_target = sformat( "%1:%2", target[0]:"", target[1]:"" );
    curr_tpg = target[2]:-1;
    }

}
