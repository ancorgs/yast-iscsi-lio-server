/*
|***************************************************************************
|
| Copyright (c) [2012] Novell, Inc.
| All Rights Reserved.
|
| This program is free software; you can redistribute it and/or
| modify it under the terms of version 2 of the GNU General Public License as
| published by the Free Software Foundation.
|
| This program is distributed in the hope that it will be useful,
| but WITHOUT ANY WARRANTY; without even the implied warranty of
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
| GNU General Public License for more details.
|
| You should have received a copy of the GNU General Public License
| along with this program; if not, contact Novell, Inc.
|
| To contact Novell about this file by physical or electronic mail,
| you may find current contact information at www.novell.com
|
|***************************************************************************
*/
/**
 * File:	include/iscsi-lio-server/dialogs.ycp
 * Package:	Configuration of iscsi-lio-server
 * Summary:	Dialogs definitions
 * Authors:	Thomas Fehr <fehr@suse.de>
 *
 * $Id$
 */

{

textdomain "iscsi-lio-server";

import "Label";
import "String";
import "Wizard";
import "IscsiLioServer";
import "IscsiLioData";
import "CWMTab";
import "CWM";
import "CWMServiceStart";
import "CWMFirewallInterfaces";
import "TablePopup";

include "iscsi-lio-server/helps.ycp";
include "iscsi-lio-server/widgets.ycp";

// store current here
string current_tab = "service";

map tabs_descr = $[
// first tab - service status and firewall
        "service":$[
         "header"       : _("Service"),
         "contents"     :
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                "auto_start_up",
                                `VSpacing (2),
                                "firewall",
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                              ),
                          `VStretch()
                        ),
         "widget_names" : [ "auto_start_up", "firewall" ]
         ],
// second tab - global authentication
        "global":$[
         "header"       : _("Global"),
         "contents"     :
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
				"global_config",
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                              ),
                          `VStretch()
                        ),
         "widget_names" : [ "global_config" ]
         ],
// third tab - targets / luns
        "targets":$[
         "header"       : _("Targets"),
         "contents"     :
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                "server_table",
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        ),
         "widget_names" : [ "server_table" ]
        ],
	"target-details":$[
	  "contents" :
            `HBox( 
              `HWeight( 2, `Empty() ),
              `HWeight( 4,
                `VBox(
		  `HBox(
                    `HWeight(3,`InputField(`id(`target), `opt(`hstretch), _("Target"), "iqn.2001-04.com.example")),
		    `HWeight(3,`InputField(`id(`identifier), `opt(`hstretch), _("Identifier"), "test")),
		    `HWeight(1,`InputField(`id(`tpg), _("Portal group"), "1"))
		       ),
		  `HBox(
                    `HWeight(3,`ComboBox(`id(`ipaddr), `opt(`hstretch), _("Ip address"), 
                                         IscsiLioData::GetIpAddr())),
		    `HWeight(1,`InputField(`id(`port), _("Port number"), "3260"))
		       ),
                  `VSpacing(0.5),
		  `Left( `HBox( `CheckBox(`id(`auth), _("Use Authentication"), true) )),
                  `VSpacing(0.5),
                  `Table(`id(`lun_table),
                         `header(_("LUN"), _("Name"), _("Path")), []),
                  `Left(
                    `HBox(
                      `PushButton(`id(`add), _("Add")),
                      `PushButton(`id(`edit), _("Edit")),
                      `PushButton(`id(`delete), _("Delete"))
                         ))
                     )),
              `HWeight( 2, `Empty() ))

	],
	"clnt": $[
	 "contents" :
            `HBox( 
              `HWeight( 2, `Empty() ),
              `HWeight( 4,
                `VBox(
		  `HBox(
                    `HWeight(3,`InputField(`id(`target), `opt(`hstretch), _("Target"), "iqn.2001-04.com.example")),
		    `HWeight(3,`InputField(`id(`identifier), `opt(`hstretch), _("Identifier"), "test")),
		    `HWeight(1,`InputField(`id(`tpg), _("Portal group"), "1"))
		       ),
                  `Table(`id(`clnt_table),
                         `header(_("Client"), _("Lun Mapping"), _("Auth")), []),
                  `Left(
                    `HBox(
                      `PushButton(`id(`add), _("Add")),
                      `PushButton(`id(`edit_lun), _("Edit LUN")),
                      `PushButton(`id(`edit_auth), _("Edit Auth")),
                      `PushButton(`id(`delete), _("Delete")),
                      `PushButton(`id(`copy), _("Copy"))
                         ))
                  )),
              `HWeight( 2, `Empty() ))
        ],
	"auth": $[
	 "contents" :
                 `VBox(
                        `Left( `CheckBox(`id(`auth_none),`opt(`notify), _("No Authentication"), true) ),
                        `VSpacing(2),
                        `Left( `CheckBox(`id(`auth_in),`opt(`notify), _("Incoming Authentication"), false) ),
                        `VBox(
				`Table(`id(`incoming_table),
					`header(_("Username"), _("Password")),
					 []
				),
			  `Left(
			     `HBox(
				`PushButton(`id(`add), _("Add")),
				`PushButton(`id(`edit), _("Edit")),
				`PushButton(`id(`delete), _("Delete"))
				)
			      )
                          ),
                        `VSpacing(2),
                        `Left( `CheckBox(`id(`auth_out),`opt(`notify), _("Outgoing Authentication"), false) ),
                        `HBox(
                                `InputField(`id(`user_out), `opt(`hstretch), _("Username")), `Password(`id(`pass_out), _("Password"))
                          )
                  )
	]

       ];



map<string, map <string, any> > widgets = 
    $[
    "auto_start_up" : 
        CWMServiceStart::CreateAutoStartWidget ($[
            "get_service_auto_start" : IscsiLioServer::GetStartService,
            "set_service_auto_start" : IscsiLioServer::SetStartService,
            // radio button (starting iscsitarget service - option 1)
            "start_auto_button" : _("When &Booting"),
            // radio button (starting LIO target service - option 2)
            "start_manual_button" : _("&Manually"),
            "help" : sformat (CWMServiceStart::AutoStartHelpTemplate (),
                // part of help text, used to describe radiobuttons (matching starting LIO target service but without "&")
                _("When Booting"),
                // part of help text, used to describe radiobuttons (matching starting LIO target service but without "&")
                _("Manually")
                ),
            ]),

    // firewall
    "firewall" : CWMFirewallInterfaces::CreateOpenFirewallWidget ($[
            "services" : [ "service:iscsitarget" ],
            "display_details" : true,
	      ]),

    // discovery authentication dialog
    "global_config" : $[
        "widget" : `custom,
        "custom_widget" : AuthTerm(),
        "init"   : initGlobal,
        "handle" : handleAuth,
        "store"  : storeGlobal,
        "validate_type" : `function,
        "validate_function" : validateGlobal,
        "help" : HELPS["global_config"]:""
        ],

	// targets dialog
       "server_table" : $[
		"widget" : `custom,
		"custom_widget" :
		`VBox(
			`Table(`id(`server),
				`header(_("Targets"), `Right(_("Portal group"))),
				[]),
		 `Left(
		  `HBox(
		      `PushButton(`id(`add), _("Add")),
		      `PushButton(`id(`edit), _("Edit")),
		      `PushButton(`id(`delete), _("Delete"))
		       )
		      )
		     ),
		"init"	: initTable,
		"handle" : handleTable,
		"help" : HELPS["server_table"]:""
	],

	// dialog for add new target
     "target-add" : $[
        "widget" : `custom,
        "custom_widget" : tabs_descr["target-details", "contents"]:nil,
        "init"   : initAddTarget,
        "store"  : storeAddTarget,
	"handle" : handleModify,
        "validate_type" : `function,
        "validate_function" : validateAddTarget,
        "help" : HELPS["target-add"]:""
        ],

	// dialog for expert settings
     "expert" : $[
        "widget" : `custom,
        "custom_widget" :
                 `VBox(
                        `VBox(
				`Table(`id(`expert_table),
					`header(_("Key"), _("Value")),
					 []
				),
			  `Left(
			     `HBox(
				`PushButton(`id(`add), _("Add")),
				`PushButton(`id(`edit), _("Edit")),
				`PushButton(`id(`delete), _("Delete"))
				)
			      )
                          )
                  ),
//        "init"   : initGlobal,
//        "handle" : handleAuth,
//        "store"  : storeGlobal,
        "help" : HELPS["expert"]:""
        ],

	// dialog for add/edit authentication for target
     "target-clnt" : $[
        "widget" : `custom,
        "custom_widget" : tabs_descr["clnt", "contents"]:nil,
        "init"   : initClient,
        "handle" : handleClient,
        "store"  : storeClient,
        "validate_type" : `function,
        "validate_function" : validateClient,
        "help" : HELPS["global_config"]:""
        ],

	// dialog for modifying target
     "target-modify" : $[
        "widget" : `custom,
        "custom_widget" : tabs_descr["target-details", "contents"]:nil,
        "init"   : initModify,
	"handle" : handleModify,
        "store"  : storeModify,
        "help" : HELPS["target-modify"]:""
        ]
	];




/**
 * Summary dialog
 * @return dialog result
 */
// Main dialog - tabbed
any SummaryDialog() {
    string caption = _("iSCSI LIO Target Overview");
    map widget_descr = $[
        "tab": CWMTab::CreateWidget($[
            "tab_order": [ "service", "global", "targets" ],
            "tabs": tabs_descr,
            "widget_descr": widgets,
            "initial_tab" : current_tab,
            "tab_help" : _("<h1>iSCSI Target</h1>"),
        ]),
    ];
    term contents = `VBox( "tab" );
    list<map <string, any> > w = CWM::CreateWidgets (["tab"], (map <string, map <string, any> >)widget_descr);
    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);

    Wizard::SetContentsButtons(caption, contents, help, Label::NextButton (), Label::FinishButton ());
    Wizard::DisableBackButton();

    symbol ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}

// dialog for add target
any AddDialog(){
     current_tab = "targets";
    string caption = _("Add iSCSI Target");
    list<map <string, any> > w = CWM::CreateWidgets (["target-add"], (map <string, map <string, any> >)widgets);
        term contents =
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                w[0, "widget"]:`VSpacing (1),
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        );

    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, HELPS["target-add"]:"",
            Label::BackButton(), Label::NextButton());

    any ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}

// discovery authentication dialog
any AuthDialog(){
     current_tab = "targets";
    string caption = _("Modify iSCSI Target Client Setup");
    list<map <string, any> > w = CWM::CreateWidgets (["target-clnt"], (map <string, map <string, any> >)widgets);
        term contents =
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                w[0, "widget"]:`VSpacing (1),
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        );

    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, HELPS["global_config"]:"",
            Label::BackButton(), Label::NextButton());

    any ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}

// edit target dialog
any EditDialog(){
     current_tab = "targets";
    string caption = _("Modify iSCSI Target Lun Setup");
    list<map <string, any> > w = CWM::CreateWidgets (["target-modify"], (map <string, map <string, any> >)widgets);
        term contents =
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                w[0, "widget"]:`VSpacing (1),
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        );

    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, HELPS["target-modify"]:"",
            Label::BackButton(), Label::NextButton());

    any ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}

// expert target dialog
any ExpertDialog(){
    string caption = _("iSCSI Target Expert Settings");
    list<map <string, any> > w = CWM::CreateWidgets (["expert"], (map <string, map <string, any> >)widgets);
        term contents =
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                w[0, "widget"]:`VSpacing (1),
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        );

    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, HELPS["expert"]:"",
            Label::BackButton(), Label::NextButton());

    any ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}


/* EOF */
}
